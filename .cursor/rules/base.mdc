---
description: 
globs: 
alwaysApply: true
---
## 必ずやること

- `template ディレクトリ配下を丸ごとコピーして、指定の日のディレクトリをまず最初に作成してください
    例：`day3` の銀行アプリ といわれたら `day3_bank_app` というディレクトリを作ること
- 作成したディレクトリ直下の README に今回作るアプリの設計内容を記載してください

## 作成するアプリについて

- 同じドメインのアプリ(フォーカスを変えるはあり)はなしです
- **基本的には** 言語は **TypeScript**, フレームワークは **Next.js (App Router)** です
- **UIが不要なアプリケーション（CLI、バッチ処理、API専用サーバ、データ処理ツールなど）の場合は、Go言語でのシンプルな実装でも構いません**
  - DBアクセスには `database/sql` + SQLiteドライバ（`github.com/mattn/go-sqlite3`）を利用してください
  - 設定ファイルは `config.yaml` または環境変数で管理してください
  - ログは標準の `log` パッケージまたは `slog` を利用してください
- 簡素で構わないので実装した機能を一通り操作できるwebページを用意してください（Go言語の場合はCLIでの操作確認でも可）
  - ユーザが必要なものについては、認証ページを作成するのではなく簡単にユーザを切り替えられる機能で代替してください (例: `userId` をクエリパラメータやシンプルなUIで切り替える)
- ログは **`console.log`** を基本とし、必要に応じてデバッグに役立つ情報を出力してください
- エラーハンドリングは標準の `try...catch` を基本とし、複雑なラップは不要です。エラー発生時は **`console.error`** でログを出力してください。
- DBは **SQLite** を利用します。(`db/dev.db`)
- DBアクセスには **better-sqlite3** (または同等のシンプルなSQLiteライブラリ) を利用してください。
- APIは **Next.js Route Handlers** (`app/api/.../route.ts`) で実装してください。スキーマ駆動開発は必須ではありません。
- 細かいエラーハンドリングやセキュリティ観点については目を瞑ってください。
- Linter (Biome) の警告やエラーは可能な範囲で修正してください。
- アーキテクチャはシンプルさを保ち、厳密なレイヤリングは不要です。
- 起動はローカルでのみ行うためSSLなどは不要です。
- 画像は https://picsum.photos のものを直接リンクで使用してください

## デザイン

- スタイリングは **Tailwind CSS** を利用してください
- レスポンシブデザインを採用する
- 毎回異なるモダンなデザイントレンド（例: ミニマリズム、グラスモーフィズム、ニューモーフィズム、ブルータリズムなど）を積極的に試すこと。過去のプロジェクトのデザインとは明確に差別化すること

## 必ずやること

- DBスキーマを変更したい場合は、**`db/dev.db` ファイルを削除** してください。次回サーバ起動時に `lib/db.ts` 内の定義に基づいて新しいスキーマで自動生成されます。
- 不要なファイルやコードは削除してください
- **作業ディレクトリの厳格な管理とパス指定:**
    - 新しい日のディレクトリ (`dayXX_...`) を作成した直後は、**必ず `cd dayXX_...` コマンドでそのディレクトリに移動**してください。
    - `edit_file`, `read_file`, `list_dir`, `delete_file` などのツールでファイル/ディレクトリを指定する際、**相対パスは常にワークスペースルートからの相対パス**として扱われます。特定の日のディレクトリ (`dayXX_...`) 内のファイルを操作する場合は、**必ずパスの先頭に `dayXX_.../` を付けてください** (例: `day23_image_resizer_api/app/page.tsx`)。
    - ファイル/ディレクトリ操作後は、**直ちに `list_dir` や `read_file` で意図したパスで操作が正しく実行されたかを確認してください。**

## アプリケーションの作成の流れについて

以下の順番で作成をしてください。また、仕様と工程が確定したら以降確認を取る必要はありません。

0. **プロジェクトの仕様決定**
   - 私がテーマを決めるので、その壁打ちを実施
   - 仕様が不明確な場合は質問をする
   - 仕様が決定したら、具体的な作業順序を作成する。以下を含めること
     - ディレクトリレイアウトと作成するファイル一覧
     - 各ファイルは300行以内になるようにすること
     - 各ステップごとにテストを作成しその実施をすること
     - テスト通過後はステップ名を含むコミットを行うこと
   - 以後は上記の作業手順に従うこと

1. **プロジェクト初期化**
   - 仕様が確定しGoがでたら以下の手順を実施
   - 必要な設定ファイルの更新
   - PROGRESS.md に作業工程を記載
   - 基本レイアウト作成

2. **データモデリングとDB設定**
   - 主要エンティティの定義 (`lib/db.ts` の `initializeSchema` 内で `CREATE TABLE` 文を記述)
   - リレーションシップの設計 (`FOREIGN KEY` 制約など)
   - DBファイル (`db/dev.db`) を削除してサーバ再起動でスキーマ反映

3. **APIエンドポイント実装**
   - データ取得APIの作成 (`better-sqlite3` で `SELECT`)
   - データ更新・作成APIの実装 (`better-sqlite3` で `INSERT`, `UPDATE`, `DELETE`)
   - 最低限のエラーハンドリング
   - curl などで API の動作確認（テストはあなたが実施してください）

4. **ユーザー識別機構**
   - シンプルなユーザー切替UI
   - ユーザーコンテキスト作成

5. **UIコンポーネント実装**
   - 一覧表示ページ
   - 詳細表示ページ
   - フォームと操作UI
   - アプリのタイトルを DayX - xxxxx とする

6. **主要業務フロー実装**
   - 主要な操作シーケンスの実装
   - データの関連処理
   - 基本的なフィードバック表示

7. **デバッグとテスト**
   - MCP 経由での playwright による動作確認
   - エラーハンドリングの確認
   - 不要なファイルやコードは削除してください

8. **ドキュメント作成**
   - README の更新
   - .cursor/rules/knowledge.mdc の更新

## 気をつけること

- Next.js 15 から Route Handler の params などの動的 API が非同期になり、アクセス前に await する必要があるため、handleGitRequest 関数内で params オブジェクト自体を await してからプロパティにアクセスしてください
- バグや不具合が発生した場合は、まず自分で調査してみてください。
   - デバッグログを出力して、どこでどういうエラーが出ているかを確認してください。
   - 調査の結果、私に確認が必要な場合はその旨を伝えてください。
   - 解消したらデバッグログを削除してください。
- go のパッケージ名をつける場合は `github.com/yanachuwan9sm/vibe-coding-system-basics/dayX_xxx` という形式でつけてください
- cd するときは **必ず** `pwd` でカレントディレクトリを確認してから `cd` してください
- `npm run dev` などでサーバの起動を行う場合は別のターミナルを開き、今回の作業対象ディレクトリの dayX_xxxx に移動してから実施してください
- バックグラウンドで npm run dev を実行する際は、必ず cd dayXX_... && npm run dev という形式の単一コマンドで実行してください。これにより、意図したディレクトリでサーバーが起動することを保証します。
- サーバは localhost:3001 で起動してください
- 質問や選択肢を提示する場合は必ず頭に数字をつけてください。私はその数字で選択肢を選択します。
- アプリを作る際は日本のユーザが使いやすいように、日本語を用いてください
- READMEも日本語で書いてください

## `edit_file` 効果的な利用ガイドライン

大規模ファイル (> 300-400行目安) や複雑な変更 (複数箇所、広範囲リファクタリング) で `edit_file` が失敗することがあります。以下を試してください:

1.  **スコープ限定:** 指示は「関数 `X` を修正」「構造体 `Y` を変更」のように具体的に限定する。
2.  **変更量削減:** 複数の変更は、関連性の高い1-2個ずつ複数回の `edit_file` に分割する。
3.  **適切なコンテキスト:** 変更箇所の特定に必要な最小限の周辺コード (`// ... existing code ...` の前後) を含める。
4.  **(根本対策) ファイル分割:** 可能であれば、ファイルをより小さく機能的に分割する。

## 禁止

- こちらからアクションしない限りは勝手に生成を止めずコードを生成し続けてください。
- 作業は必ず `template` ディレクトリからコピーした `dayXX_xxxx` 配下のディレクトリ内で行うこと。それ以外の箇所でのファイルの作成は禁止する
- 完成したら自分自身で正しくアクセスできて表示できるか？（最低限APIレベルでの確認）を行ってください。
- `package.json` の `next`, `react` 等の主要な依存パッケージバージョンを勝手に変更する行為。
- `package.json` の スクリプトの既存のコマンドを勝手に変更する行為

## 実装時の注意点 (汎用)

- **ライブラリ/APIの事前調査:**
    - 主要な外部ライブラリやAPIを使用する際は、**コード生成前にその使い方（主要な関数、引数、期待されるデータ構造、必要なデータ変換等）を十分に調査・確認**してください。
    - 不明な点や複数の選択肢がある場合は、安易に推測せず、**確認または提案**を行ってください。

- **状態管理の明確化:**
    - リクエストをまたいで状態を保持する必要がある場合（例: 認証トークン、一時データ、チャレンジ）、**どこに（例: DBの特定モデル、セッションストレージ）、何を（データ項目）、どのように（有効期限、検索キー）管理するか**を明記してください。インメモリでの安易な状態保持は避け、DBや適切なストレージを利用する方針を指示してください。

- **複雑なフローの段階的実装:**
    - 複数のステップやコンポーネントが連携する複雑な機能を実装する場合、**機能を小さな単位に分割**し、**各単位の実装と動作確認**を段階的に進めるように指示してください。（例: 「まずAPIエンドポイントを実装し`curl`でテスト、次にUIを接続」）

- **設計と実装の整合性:**
    - 最初に設計（シーケンス図など）を提示した場合でも、実装中に**より良い方法が見つかった場合**や**設計との乖離が発生しそうな場合**は、立ち止まって確認や相談をするように促してください。

- **テスト**
    - 作業工程の最後に今回追加した内容に対してテストを実装し、実施してください
    - dayXX配下に存在する PROGRESS.md に進捗を記入し、完了した項目にチェックをいれること

## 実装のアイデアだしについて

- rules/knowledge.md に記載されているアプリケーションとは被らないようにしてください
- バックエンドの学習を目的としているため、フロントエンドの学習を目的としたアプリケーションは避けてください
- 可能な限り、実際の業務で使われるような非常に複雑なアプリケーションを想定してください
- あまりにも簡単なアプリケーションも避けてください（ToDoアプリやメモアプリなど）
- 例えば単純なCRUDだったり、見せ方を変えただけのアイデアは学びにならないため必ずさけてください
- 提案は、学習効果を考慮して、優先順位をつけてください
- 提案は、具体的に何が学べるのかをきちんと示してください

